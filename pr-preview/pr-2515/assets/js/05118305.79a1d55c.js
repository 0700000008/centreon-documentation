"use strict";(self.webpackChunkcentreon_docs=self.webpackChunkcentreon_docs||[]).push([[25193],{603905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>N});var a=n(667294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),d=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=d(t.components);return a.createElement(p.Provider,{value:e},t.children)},k="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},s=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),k=d(n),s=r,N=k["".concat(p,".").concat(s)]||k[s]||u[s]||l;return n?a.createElement(N,i(i({ref:e},m),{},{components:n})):a.createElement(N,i({ref:e},m))}));function N(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[k]="string"==typeof t?t:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},927825:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>m,contentTitle:()=>p,default:()=>N,frontMatter:()=>o,metadata:()=>d,toc:()=>k});n(667294);var a=n(603905);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){return e=null!=e?e:{},Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):function(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))})),t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}const o={id:"developer-broker-bbdo",title:"The BBDO protocol"},p=void 0,d={unversionedId:"developer/developer-broker-bbdo",id:"version-21.10/developer/developer-broker-bbdo",title:"The BBDO protocol",description:"The BBDO protocol has been created to be the default protocol of Centreon Broker. It is lightweight on the wire and",source:"@site/versioned_docs/version-21.10/developer/developer-broker-bbdo.md",sourceDirName:"developer",slug:"/developer/developer-broker-bbdo",permalink:"/centreon-documentation/pr-preview/pr-2515/docs/21.10/developer/developer-broker-bbdo",draft:!1,editUrl:"https://github.com/centreon/centreon-documentation/edit/staging/versioned_docs/version-21.10/developer/developer-broker-bbdo.md",tags:[],version:"21.10",lastUpdatedAt:1692886463,formattedLastUpdatedAt:"Aug 24, 2023",frontMatter:{id:"developer-broker-bbdo",title:"The BBDO protocol"},sidebar:"version-21.10/docs",previous:{title:"Stream connectors",permalink:"/centreon-documentation/pr-preview/pr-2515/docs/21.10/developer/developer-broker-stream-connector"},next:{title:"Centreon Broker Event Mapping",permalink:"/centreon-documentation/pr-preview/pr-2515/docs/21.10/developer/developer-broker-mapping"}},m={},k=[{value:"Introduction",id:"introduction",level:2},{value:"Types",id:"types",level:2},{value:"Packet format",id:"packet-format",level:2},{value:"Packet ID",id:"packet-id",level:3},{value:"Event categories",id:"event-categories",level:2},{value:"NEB",id:"neb",level:3},{value:"Storage",id:"storage",level:3},{value:"BBDO",id:"bbdo",level:3},{value:"BAM",id:"bam",level:3},{value:"Dumper",id:"dumper",level:3},{value:"Extcmd",id:"extcmd",level:3},{value:"Event serialization",id:"event-serialization",level:2},{value:"Example",id:"example",level:2},{value:"Connection establishment",id:"connection-establishment",level:2},{value:"Example",id:"example-1",level:3},{value:"Acknowledgement",id:"acknowledgement",level:2}],u={toc:k},s="wrapper";function N(t){var{components:e}=t,n=i(t,["components"]);return(0,a.kt)(s,l(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),a.forEach((function(e){r(t,e,n[e])}))}return t}({},u,n),{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The BBDO protocol has been created to be the default protocol of Centreon Broker. It is lightweight on the wire and\neasy to decode. It is especially designed the for monitoring area of Centreon Broker."),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,'BBDO stands for Broker Binary Data Object. BBDO is designed to transfer\n"data packets" from a node to another. These "data packets" are most of\nthe time monitoring information provided by the monitoring engine (eg.\nCentreon Engine or Nagios). It uses mostly raw binary values which\nallows it to consume very few memory.'),(0,a.kt)("h2",{id:"types"},"Types"),(0,a.kt)("p",null,"As a binary protocol, BBDO uses data types to serialize data. They are\nwritten in a Big Endian format and described in the following table."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Representation"),(0,a.kt)("th",{parentName:"tr",align:null},"Size (bytes)"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"integer"),(0,a.kt)("td",{parentName:"tr",align:null},"binary"),(0,a.kt)("td",{parentName:"tr",align:null},"4")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"short integer"),(0,a.kt)("td",{parentName:"tr",align:null},"binary"),(0,a.kt)("td",{parentName:"tr",align:null},"2")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"long integer"),(0,a.kt)("td",{parentName:"tr",align:null},"binary"),(0,a.kt)("td",{parentName:"tr",align:null},"8")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"time"),(0,a.kt)("td",{parentName:"tr",align:null},"binary (timestamp)"),(0,a.kt)("td",{parentName:"tr",align:null},"8")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"binary (0 is false, everything else is true)"),(0,a.kt)("td",{parentName:"tr",align:null},"1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"nul-terminated UTF-8 string"),(0,a.kt)("td",{parentName:"tr",align:null},"variable")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"real"),(0,a.kt)("td",{parentName:"tr",align:null},"nul-terminated UTF-8 string (either in fixed (2013) or scientific (2.013e+3) format)"),(0,a.kt)("td",{parentName:"tr",align:null},"variable")))),(0,a.kt)("h2",{id:"packet-format"},"Packet format"),(0,a.kt)("p",null,"The packets format of Centreon Broker introduce only 16 bytes of header\nto transmit each monitoring event (usually about 100-200 bytes each).\nFields are provided in the big endian format."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Field"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"checksum"),(0,a.kt)("td",{parentName:"tr",align:null},"unsigned short integer"),(0,a.kt)("td",{parentName:"tr",align:null},"CRC-16-CCITT X.25 of size, id, source and destination. The checksum can be used to recover from an incomplete data packet sent in the stream by dropping bytes one by one.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"size"),(0,a.kt)("td",{parentName:"tr",align:null},"unsigned short integer"),(0,a.kt)("td",{parentName:"tr",align:null},"Size of the packet, excluding header.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"id"),(0,a.kt)("td",{parentName:"tr",align:null},"unsigned integer"),(0,a.kt)("td",{parentName:"tr",align:null},"ID of the event.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"source_id"),(0,a.kt)("td",{parentName:"tr",align:null},"unsigned integer"),(0,a.kt)("td",{parentName:"tr",align:null},"The id of the source instance of this event.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"destination_id"),(0,a.kt)("td",{parentName:"tr",align:null},"unsigned integer"),(0,a.kt)("td",{parentName:"tr",align:null},"The id of the destination instance for this event.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"data"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Payload data.")))),(0,a.kt)("h3",{id:"packet-id"},"Packet ID"),(0,a.kt)("p",null,"As seen in the previous paragraph, every packet holds an ID that express\nby itself how data is encoded. This ID can be splitted in two 16-bits\ncomponents. The 16 most significant bits are the event category and the\n16 least significant bits the event type."),(0,a.kt)("p",null,"The event categories serialize events properties one after the other, so\norder is very important to not loose track when unserializing events."),(0,a.kt)("h2",{id:"event-categories"},"Event categories"),(0,a.kt)("p",null,"The current available categories are described in the table below."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Category"),(0,a.kt)("th",{parentName:"tr",align:null},"API macro"),(0,a.kt)("th",{parentName:"tr",align:null},"Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"NEB"),(0,a.kt)("td",{parentName:"tr",align:null},"BBDO_NEB_TYPE"),(0,a.kt)("td",{parentName:"tr",align:null},"1"),(0,a.kt)("td",{parentName:"tr",align:null},"Classical monitoring events (hosts, services, notifications, event handlers, plugin execution, ...).")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"BBDO"),(0,a.kt)("td",{parentName:"tr",align:null},"BBDO_BBDO_TYPE"),(0,a.kt)("td",{parentName:"tr",align:null},"2"),(0,a.kt)("td",{parentName:"tr",align:null},"Category internal to the BBDO protocol.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Storage"),(0,a.kt)("td",{parentName:"tr",align:null},"BBDO_STORAGE_TYPE"),(0,a.kt)("td",{parentName:"tr",align:null},"3"),(0,a.kt)("td",{parentName:"tr",align:null},"Category related to RRD graph building.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Correlation"),(0,a.kt)("td",{parentName:"tr",align:null},"BBDO_CORRELATION_TYPE"),(0,a.kt)("td",{parentName:"tr",align:null},"4"),(0,a.kt)("td",{parentName:"tr",align:null},"Status correlation.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Dumper"),(0,a.kt)("td",{parentName:"tr",align:null},"BBDO_DUMPER_TYPE"),(0,a.kt)("td",{parentName:"tr",align:null},"5"),(0,a.kt)("td",{parentName:"tr",align:null},"Dumper events.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Bam"),(0,a.kt)("td",{parentName:"tr",align:null},"BBDO_BAM_TYPE"),(0,a.kt)("td",{parentName:"tr",align:null},"6"),(0,a.kt)("td",{parentName:"tr",align:null},"Bam events.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Extcmd"),(0,a.kt)("td",{parentName:"tr",align:null},"BBDO_EXTCMD_TYPE"),(0,a.kt)("td",{parentName:"tr",align:null},"7"),(0,a.kt)("td",{parentName:"tr",align:null},"Centreon Broker external commands.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Internal"),(0,a.kt)("td",{parentName:"tr",align:null},"BBDO_INTERNAL_TYPE"),(0,a.kt)("td",{parentName:"tr",align:null},"65535"),(0,a.kt)("td",{parentName:"tr",align:null},"Reserved for internal protocol use.")))),(0,a.kt)("h3",{id:"neb"},"NEB"),(0,a.kt)("p",null,"The table below lists event types available in the NEB category. They\nhave to be mixed with the BBDO_NEB_TYPE category to get a BBDO event ID."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Acknowledgement"),(0,a.kt)("td",{parentName:"tr",align:null},"1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Comment"),(0,a.kt)("td",{parentName:"tr",align:null},"2")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Custom variable"),(0,a.kt)("td",{parentName:"tr",align:null},"3")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Custom variable status"),(0,a.kt)("td",{parentName:"tr",align:null},"4")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Downtime"),(0,a.kt)("td",{parentName:"tr",align:null},"5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Event handler"),(0,a.kt)("td",{parentName:"tr",align:null},"6")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Flapping status"),(0,a.kt)("td",{parentName:"tr",align:null},"7")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Host check"),(0,a.kt)("td",{parentName:"tr",align:null},"8")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Host dependency"),(0,a.kt)("td",{parentName:"tr",align:null},"9")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Host group"),(0,a.kt)("td",{parentName:"tr",align:null},"10")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Host group member"),(0,a.kt)("td",{parentName:"tr",align:null},"11")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Host"),(0,a.kt)("td",{parentName:"tr",align:null},"12")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Host parent"),(0,a.kt)("td",{parentName:"tr",align:null},"13")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Host status"),(0,a.kt)("td",{parentName:"tr",align:null},"14")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Instance"),(0,a.kt)("td",{parentName:"tr",align:null},"15")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Instance status"),(0,a.kt)("td",{parentName:"tr",align:null},"16")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Log entry"),(0,a.kt)("td",{parentName:"tr",align:null},"17")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Module"),(0,a.kt)("td",{parentName:"tr",align:null},"18")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Service check"),(0,a.kt)("td",{parentName:"tr",align:null},"19")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Service dependency"),(0,a.kt)("td",{parentName:"tr",align:null},"20")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Service group"),(0,a.kt)("td",{parentName:"tr",align:null},"21")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Service group member"),(0,a.kt)("td",{parentName:"tr",align:null},"22")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Service"),(0,a.kt)("td",{parentName:"tr",align:null},"23")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Service status"),(0,a.kt)("td",{parentName:"tr",align:null},"24")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Instance Configuration"),(0,a.kt)("td",{parentName:"tr",align:null},"25")))),(0,a.kt)("h3",{id:"storage"},"Storage"),(0,a.kt)("p",null,"The table below lists event types available in the Storage category.\nThey have to be mixed with the BBDO_STORAGE_TYPE category to get a BBDO\nevent ID."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"metric"),(0,a.kt)("td",{parentName:"tr",align:null},"1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"rebuild"),(0,a.kt)("td",{parentName:"tr",align:null},"2")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"remove_graph"),(0,a.kt)("td",{parentName:"tr",align:null},"3")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"status"),(0,a.kt)("td",{parentName:"tr",align:null},"4")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"index mapping"),(0,a.kt)("td",{parentName:"tr",align:null},"5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"metric mapping"),(0,a.kt)("td",{parentName:"tr",align:null},"6")))),(0,a.kt)("h3",{id:"bbdo"},"BBDO"),(0,a.kt)("p",null,"The table below lists event types available in the BBDO category.\nThey have to be mixed with the BBDO_BBDO_TYPE category to get a BBDO\nevent ID."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"version_response"),(0,a.kt)("td",{parentName:"tr",align:null},"1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ack"),(0,a.kt)("td",{parentName:"tr",align:null},"2")))),(0,a.kt)("h3",{id:"bam"},"BAM"),(0,a.kt)("p",null,"The table below lists event types available in the BAM category.\nThey have to be mixed with the BBDO_BAM_TYPE category to get a\nBBDO event ID."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ba_status"),(0,a.kt)("td",{parentName:"tr",align:null},"1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"kpi_status"),(0,a.kt)("td",{parentName:"tr",align:null},"2")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"meta_service_status"),(0,a.kt)("td",{parentName:"tr",align:null},"3")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ba_event"),(0,a.kt)("td",{parentName:"tr",align:null},"4")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"kpi_event"),(0,a.kt)("td",{parentName:"tr",align:null},"5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ba_duration_event"),(0,a.kt)("td",{parentName:"tr",align:null},"6")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dimension_ba_event"),(0,a.kt)("td",{parentName:"tr",align:null},"7")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dimension_kpi_event"),(0,a.kt)("td",{parentName:"tr",align:null},"8")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dimension_ba_bv_relation_event"),(0,a.kt)("td",{parentName:"tr",align:null},"9")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dimension_bv_event"),(0,a.kt)("td",{parentName:"tr",align:null},"10")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dimension_truncate_table_signal"),(0,a.kt)("td",{parentName:"tr",align:null},"11")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"rebuild"),(0,a.kt)("td",{parentName:"tr",align:null},"12")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dimension_timeperiod"),(0,a.kt)("td",{parentName:"tr",align:null},"13")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dimension_ba_timeperiod_relation"),(0,a.kt)("td",{parentName:"tr",align:null},"14")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dimension_timeperiod_exception"),(0,a.kt)("td",{parentName:"tr",align:null},"15")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"dimension_timeperiod_exclusion"),(0,a.kt)("td",{parentName:"tr",align:null},"16")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"inherited_downtime"),(0,a.kt)("td",{parentName:"tr",align:null},"17")))),(0,a.kt)("h3",{id:"dumper"},"Dumper"),(0,a.kt)("p",null,"The table below lists event types available in the Dumper category.\nThey have to be mixed with the BBDO_DUMPER_TYPE category to get a\nBBDO event ID."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Dump"),(0,a.kt)("td",{parentName:"tr",align:null},"1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Timestamp cache"),(0,a.kt)("td",{parentName:"tr",align:null},"2")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Remove"),(0,a.kt)("td",{parentName:"tr",align:null},"3")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Reload"),(0,a.kt)("td",{parentName:"tr",align:null},"4")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Db dump"),(0,a.kt)("td",{parentName:"tr",align:null},"5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Db dump committed"),(0,a.kt)("td",{parentName:"tr",align:null},"6")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Entries Ba"),(0,a.kt)("td",{parentName:"tr",align:null},"7")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Entries Ba type"),(0,a.kt)("td",{parentName:"tr",align:null},"8")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Entries boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"9")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Entries host"),(0,a.kt)("td",{parentName:"tr",align:null},"10")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Entries kpi"),(0,a.kt)("td",{parentName:"tr",align:null},"11")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Entries organization"),(0,a.kt)("td",{parentName:"tr",align:null},"12")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Entries service"),(0,a.kt)("td",{parentName:"tr",align:null},"13")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Directory dump"),(0,a.kt)("td",{parentName:"tr",align:null},"14")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Directory dump committed"),(0,a.kt)("td",{parentName:"tr",align:null},"15")))),(0,a.kt)("h3",{id:"extcmd"},"Extcmd"),(0,a.kt)("p",null,"The table below lists event types available in the Extcmd category.\nThey have to be mixed with the BBDO_EXTCMD_TYPE category to get a\nBBDO event ID."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Command request"),(0,a.kt)("td",{parentName:"tr",align:null},"1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Command result"),(0,a.kt)("td",{parentName:"tr",align:null},"2")))),(0,a.kt)("h2",{id:"event-serialization"},"Event serialization"),(0,a.kt)("p",null,"Most events listed in each ",(0,a.kt)("a",{parentName:"p",href:"#event-categories"},"event category")," have a mapping used to serialize their content. Indeed\ntheir content is directly serialized in the ",(0,a.kt)("a",{parentName:"p",href:"#packet-format"},"packet payload data"),", one field after the other in the\norder described in the ",(0,a.kt)("a",{parentName:"p",href:"/centreon-documentation/pr-preview/pr-2515/docs/21.10/developer/developer-broker-mapping"},"mapping tables"),". They are encoded following rules described in the\n",(0,a.kt)("a",{parentName:"p",href:"#types"},"types paragraph"),"."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Let's take an example and see how an ",(0,a.kt)("em",{parentName:"p"},"host check event")," gets sent in a\npacket. Its mapping is as follow :"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Value in example"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"active_checks_enabled"),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"True.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"check_type"),(0,a.kt)("td",{parentName:"tr",align:null},"short integer"),(0,a.kt)("td",{parentName:"tr",align:null},"0 (active host check).")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"host_id"),(0,a.kt)("td",{parentName:"tr",align:null},"unsigned integer"),(0,a.kt)("td",{parentName:"tr",align:null},"42")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"next_check"),(0,a.kt)("td",{parentName:"tr",align:null},"time"),(0,a.kt)("td",{parentName:"tr",align:null},"1365080225")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"command_line"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"./my_plugin -H 127.0.0.1")))),(0,a.kt)("p",null,"And gives the following packet with values in hexadecimal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"+-----------------+-----------------+-----------------------------------+\n|      CRC16      |      SIZE       |                ID                 |\n+========+========+========+========+========+========+========+========+\n|   0A   |   23   |   00   |   28   |   00   |   01   |   00   |   09   |\n+--------+--------+--------+--------+--------+--------+--------+--------+\n\n+--------+-----------------+-----------------------------------+--------\n| active_|                 |                                   |\n| checks_|    check_type   |              host_id              |    =>\n| enabled|                 |                                   |\n+========+========+========+========+==========================+========+\n|   01   |   00   |   00   |   00   |   00   |   00   |   2A   |   00   |\n+--------+--------+--------+--------+--------+--------+--------+--------+\n\n--------------------------+--------------------------------------------\n                            =>  next_check                      |    =>\n+========+========+========+========+========+========+========+========+\n|   00   |   00   |   00   |   51   |   5D   |   78   |   A1   |   2E   |\n+--------+--------+--------+--------+--------+--------+--------+--------+\n\n-----------------------------------------------------------------------\n                            => command_line =>\n+========+========+========+========+========+========+========+========+\n|   2F   |   6D   |   79   |   5F   |   70   |   6C   |   75   |   67   |\n+--------+--------+--------+--------+--------+--------+--------+--------+\n\n-----------------------------------------------------------------------\n                            => command_line =>\n+========+========+========+========+========+========+========+========+\n|   69   |   6E   |   20   |   2D   |   48   |   20   |   31   |   32   |\n+--------+--------+--------+--------+--------+--------+--------+--------+\n\n-----------------------------------------------------------------------+\n                            => command_line                              |\n+========+========+========+========+========+========+========+========+\n|   37   |   2E   |   30   |   2E   |   30   |   2E   |   31   |   00   |\n+--------+--------+--------+--------+--------+--------+--------+--------+\n")),(0,a.kt)("h2",{id:"connection-establishment"},"Connection establishment"),(0,a.kt)("p",null,"BBDO is a protocol which can negotiate features. When establishing a\nconnection, a ",(0,a.kt)("em",{parentName:"p"},"version_response")," packet is sent by the client. It\nprovides its supported BBDO protocol version and extensions. The server\nreplies to this message with another ",(0,a.kt)("em",{parentName:"p"},"version_response")," packet\ncontaining its own supported protocol version and extensions. If\nprotocol versions match, then starts the extensions negotiation."),(0,a.kt)("p",null,"Currently two extensions are supported : ",(0,a.kt)("em",{parentName:"p"},"TLS")," and ",(0,a.kt)("em",{parentName:"p"},"compression"),". Right\nafter the ",(0,a.kt)("em",{parentName:"p"},"version_response")," packet, each peer search in the other\npeer's extension list the extensions it supports. When one is found, it\nis enabled (ie. it immediately starts)."),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("p",null,"Let's have C the client and S the server. The following steps are\nperformed sequentially."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"C initiates a TCP connection with S and connection gets established"),(0,a.kt)("li",{parentName:"ul"},"C sends a ",(0,a.kt)("em",{parentName:"li"},"version_response")," packet with the following attributes",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"protocol major : 1"),(0,a.kt)("li",{parentName:"ul"},"protocol minor : 0"),(0,a.kt)("li",{parentName:"ul"},"protocol patch : 0"),(0,a.kt)("li",{parentName:"ul"},'extensions : "TLS compression"'))),(0,a.kt)("li",{parentName:"ul"},"S sends its own ",(0,a.kt)("em",{parentName:"li"},"version_response")," packet in reply to C's",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"protocol major : 1"),(0,a.kt)("li",{parentName:"ul"},"protocol minor : 0"),(0,a.kt)("li",{parentName:"ul"},"protocol patch : 0"),(0,a.kt)("li",{parentName:"ul"},'extensions : "TLS compression"'))),(0,a.kt)("li",{parentName:"ul"},"C and S determines which extensions they have in common (here TLS\nand compression)"),(0,a.kt)("li",{parentName:"ul"},"if order is important, extensions are applied in the order provided\nby the server"),(0,a.kt)("li",{parentName:"ul"},"TLS connection is initiated, handshake performed, ..."),(0,a.kt)("li",{parentName:"ul"},"compression connection is opened"),(0,a.kt)("li",{parentName:"ul"},"now data transmitted between C and S is both encrypted and\ncompressed !")),(0,a.kt)("h2",{id:"acknowledgement"},"Acknowledgement"),(0,a.kt)("p",null,"So called 'clever' clients/servers can acknowledge packets sent their ways.\nThis is used by Centreon Broker to insure every packet is accounted\nfor, and to start retention procedure in case the other side is unresponsive."),(0,a.kt)("p",null,"To do so, the other side must periodically send a BBDO 'ack' packet back\nthe same TCP channel. This packet has the number of packet acknowledged\nby the client."),(0,a.kt)("p",null,"'Clever'/'Dumb' modes are configured on each TCP output, on a per Broker\nbasis."))}N.isMDXComponent=!0}}]);